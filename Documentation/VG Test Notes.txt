[VG Reset]
This test resets the vector generator hardware by writing to the reset address.

This does not run any vector state machine commands (no VGGO) so you will not see any pulse width information since HALT does not pulse.
[VG Center]
This runs the CENTER command then halts. Typical time is 89.6 us
For AVG only (DVG does not have a CNTR command).
This should reset the integrators and bring the beam to the center. Some hardware (maybe all) resets the integrators when the state machine is idle so the beam will already be centered.
The Center Flag latch (E5-9 on Space Duel) is typically 84.65.
If VG does not halt, loop this test and use the DATA probe to check these Normalization / Vector Timer Pulse widths:
Active high NORM = 0.4us positive pulse width (K5-12 on Space Duel)
LD of vector timer counters = 0.4us negative pulse width (R6-9)
Qb output of first vector timer = 0.17us pos (R6-13)
Qc output of first vector timer = 0.33us pos (R6-12)
Qd output of first vector timer = 0.65us pos (R6-11)
Ripple output of first vector timer = 1.225 neg (R6-15)

Qa output of second vector timer = 1.3us pos (P6-14)
Qb output of second vector timer = 2.6us pos (P6-13)
Qc output of second vector timer = 5.3us pos (P6-12)
Qd output of second vector timer = 10.6us pos (P6-11)
Ripple output of second vector timer = 19.825 neg (P6-15)

Qa of third = 21.1us pos (N6-14)
Qb of third = 42.3us pos (N6-13)
Qc of third = 84.9us pos (N6-12)
Qd of third = 85us pos (N6-11)
Ripple output of third = 21.15 pos (N6-15)

Qa of fourth = 85us pos (M6-14)
Qb of fourth = 85.1us pos (M6-13)
Qc of fourth = 85.2us pos (M6-12)


H5-6 = 21.15us neg
L3-3 = 21.15us pos
K4-12 = 2708us pos
[VG Halt Test]
This runs just a single HALT instruction - check that the VG halt lights after this is run
The halt test should run for about 2.4us on the AVG
This is normally the first test to run (or second after VG reset).  If this fails to run (the VG does not halt after running this) it is a good idea to find the problem before proceeding with other tests.
[VG DrawShort from Ram]
Draw some short vectors on the screen then halt
Typically 178 microseconds  - be sure to set the scale to 0 on the AVG since the scaling will change the timing.
[VG Draw from RAM]
Draw some long vectors then halt.
On the AVG this is a Battlezone "gunsight" except for Space Duel which is a "star"
Typically 1174 microseconds, 454 for Space Duel.
Can also be used to test VCTR, which is 4.63us for Space Duel.
[VG Draw Single Short Vec frm Ram]
This will draw a single short vector according to your inputs.
For 15x15 vectors the time is 26.8us
[VG DrawShort from Ram BIG]
This is useful for testing the program counters.
It will create a certain number of copies of the drawshort commands which you can use to fill up the vector ram to check that the program counters are able to go all the way to the end.  You can start with a smaller number of copies and get bigger which will use more and more bits of the program counter.
For the AVG, there are 7 instructions in the drawshort BIG so there are 14 bytes in each instruction.  Battlezone has 4K vector memory so you can run 292 copies in drawshort BIG
For the DVG, 68 copies of the drawshort BIG is 2041 bytes, so it covers the whole RAM (68 is the max copies for asteroids, etc)
[VG Draw Single Long Vec]
Draw a single long vector according to your inputs.
For the 15x15 default the time is 17.6us with a bin scaling of 0
This will overdrive a monitor so don't run any of these tests with a monitor connected especially this one!
Here are times for various vector lengths:
x,y  HALT time (us)   VCTR time (us)
1,1     8.3                  1.3
2,2     9.7                  2.6
4,4     12.3                5.3
8,8     17.6                10.6
16,16  28.2                21.2
32,32  49.3                42.3
64,64  91.6                84.6
128,128 176.3            169.3
256,256  345.6           338.6
512,512  684.5           677.2
1024,1024 1361.3      1354.3
2048,2048  2715.5     2708.5

This might be able to be used to test the outputs of the Vector Data Shifters. Used X and Y of 4095, RGB 111 and Intensity 7. Yields DVY=2712.4us and DVX=2711.8us pos on all four output pins.
Retest with 1365 for odd bits, time = ???us for zeros, ??? for ones
Retest with 2730 for even bits, time = ???us for zeros, ??? for ones
[VG JMP test RAM]
This jumps around a few times to check the loading of the program counters.
Typical 359.5us
[VG JSR to address]
This will JSR to a certain address which you have to know beforehand (typically in ROM).
0x862 is the copyright in Asteroids
0x9F8 is the character set in Battlezone

NOTE: The addresses for the vector generator correspond to the 16 bit word address that is in the vector generator program counter.  Games with the AVG custom have 13 bit addresses (so up to 8K words or 16K bytes), and others have 12 bit addresses (up to 4K words or 8K bytes).

So for example 0x1000 in Star Wars is really 0x2000 in the CPU's vector memory since the CPU addresses correspond to bytes.  There is also an offset in most games since the vector memory does not start at zero in the CPU address space but it always starts at zero in the vector generator memory space.
[VG JMP only no draw]
This creates instructions which just jump to the next address.
Specify the number of copies in the control.
You can use this to check that the program counters make it all the way to the end without doing any drawing.
It should take about 2.35us plus 1.984us per copy.
[AVG Set Scale]
Set the linear and binary scaling factor.
Be sure to set bin scale to 0 if you are seeing any timing issues since if it is not zero the timing numbers will not match.
[JSR Test]
AVG only at this point -DVG coming soon!
This will perform a series of JSR instructions that are nested to a certain level.  You should see numbers on the oscilloscope screen showing the jump level.  Games with the AVG custom chip can only go to 3 levels (some repros do 4), Games with discrete AVG circuits (Tempest) can do 4 levels of nesting.
You can set the 1st JSR address to be further down in RAM since sometimes the upper-address-bits will be bad in the stack and the lower bits OK.  Just be sure you don't go past the end of RAM.
The address here is in AVG memory space (0 is the beginning of the VG RAM)
Level 0-1 = 227.8us
Level 2 = 309.2us
Level 3 = 416.9us
Level 4 = 518.8us
[Run from File]
For this test you can load a dump of a vector memory file (in binary format) and then run it on your board.
[Set color/intensity]
Sets the color and intensity using the values you input.
Takes 7us on Star Wars.
[VGGO only]
This just strobes VGGO with whatever was already loaded in memory hopefully still being there.
This is useful if you have loaded a memory image and don't want to keep loading it to show it over and over again.
[Run from Trace Setup]
This will run the "vector program" from the trace setup screen.
You can enter your own program, press "assemble" and then come back here to run it.
